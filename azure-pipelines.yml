trigger:
  branches:
    include:
    - master

pool:
  name: Android-Agent
  vmImage: 'ubuntu-latest'
  demands:
    - Agent.Version -gtVersion 3.225.0
    - java

variables:
  GRADLE_OPTS: '-Dorg.gradle.daemon=false'
  JAVA_HOME: $(JAVA_HOME_8_X64)
  JAVA_HOME_8_X64: /usr/lib/jvm/java-8-openjdk-amd64
  ANDROID_SDK_ROOT: /opt/android-sdk 


stages:
- stage: Build
  jobs:
  - job: BuildJob
    displayName: 'Build and Test'
    steps:
    - script: echo "Setting ANDROID_SDK_ROOT"
      env:
        ANDROID_SDK_ROOT: "/opt/android-sdk"
        
    - script: echo "Running Gradle clean"
      displayName: 'Clean Build'
      
    - script: ./gradlew assembleDebug
      displayName: 'Assemble Debug Build'

    - script: ./gradlew test
      displayName: 'Run Unit Tests'
    
    - script: ./gradlew cleanBuildCache
      displayName: 'Clean Gradle Cache'
    
    - script: ./gradlew assembleDebug --stacktrace
      displayName: 'Assemble Debug Build'

    # - script: ./gradlew assembleDebug --stacktrace --debug
    #   displayName: 'Assemble Debug Build with Debug Output'


    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/test-results/**/*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: true
        testRunTitle: 'Android Unit Tests'

    # - task: Gradle@3
    #   inputs:
    #     gradleWrapperFile: 'gradlew'
    #     workingDirectory: '/'
    #     tasks: 'build'
    #     publishJUnitResults: true
    #     testResultsFiles: '**/TEST-*.xml'
    #     javaHomeOption: 'JDKVersion'
    #     sonarQubeRunAnalysis: true

    - task: SonarQubePrepare@4
      inputs:
        SonarQube: 'azure-poc'  # The name of your SonarQube service connection in Azure DevOps
        scannerMode: 'CLI'
        configMode: 'file'
        cliProjectKey: '$(Build.Repository.Name)'
        cliProjectName: '$(Build.Repository.Name)'
        cliSources: 'src'
        extraProperties: |
          sonar.host.url=http://52.55.105.131:9000
          sonar.login=$(SonarQubeToken)  # Make sure to define SonarQubeToken variable in your pipeline